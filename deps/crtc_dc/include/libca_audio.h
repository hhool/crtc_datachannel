/**
 * @copyright (c) 2019-2023 BJY. All rights reserved.
 * @file libca_audio.h
 * @author hhool
 * @date 2023-02-28
 * @brief audio input and output c api
 * audio input support mono channel, sample rate [8000 16000 32000 44100 48000]
 * audio output support [mono stereo] sample rate [8000 16000 32000 44100 48000]
 */

#ifndef CRTC_CRTC_API_INCLUDE_LIBCA_AUDIO_H_
#define CRTC_CRTC_API_INCLUDE_LIBCA_AUDIO_H_

// clang-format off
#include "libca_common.h"
// clang-format on

#ifdef __cplusplus
extern "C" {
#endif

typedef enum crtc_e_channel {
  crtc_e_channel_mono = 0x1,
  crtc_e_channel_stereo = 0x2,
} crtc_e_channel;

typedef enum crtc_e_sample_rate {
  crtc_e_sample_rate_8000hz = 8000,
  crtc_e_sample_rate_16000hz = 16000,
  crtc_e_sample_rate_32000hz = 32000,
  crtc_e_sample_rate_44100hz = 44100,
  crtc_e_sample_rate_48000hz = 48000,
} crtc_e_sample_rate;

/**
 * @brief set audio process info of speaker out data to mic in data.  echo
 * cancellation, noise suppression, voice activity detection this interface is
 * global interface, set after sdk init, always valid.
 * @param handle_crtc                   handle_crtc generated by crtc_init
 * @param aec                           true enable echo cancellation, false
 * not enable
 * @param ns                            true enable noise suppression, false
 * not enable
 * @param vad                           true enable voice activity
 * detection, false not enable
 * @return int                          success:==0 failed:<0
 */
CRTC_API int crtc_audio_set_process_info(HANDLE handle_crtc,
                                         bool aec,
                                         bool ns,
                                         bool vad);

/**
 * @brief set delay time of speaker out data to mic in data.
 * @param handle_crtc                   handle_crtc generated by crtc_init
 * @param time_ms                       time_ms
 * @return int                          success:==0 failed:<0
 */
CRTC_API int crtc_audio_set_input_record_delay(HANDLE handle_crtc, int time_ms);

/**
 * @brief set pcm info of speaker out data of pcm data. support mono channel,
 * sample rate 8000,16000,32000,44100,48000, sample bits 16
 * @param handle_crtc                    handle_crtc generated by crtc_init
 * @param channels                       channels of pcm data
 * @param sample_rate                    sample rate of pcm
 * @param sample_bits                    bits of sample
 * @return int                           success:==0 failed:<0
 */
CRTC_API int crtc_pcm_speaker_out_set_info(HANDLE handle_crtc,
                                           crtc_e_channel channels,
                                           crtc_e_sample_rate sample_rate,
                                           int sample_bits);

/**
 * @brief pcm data of speaker out callback function type of
 * crtc_pcm_speaker_out_set_cb function
 * @param data                          data of pcm
 * @param size                          len of data
 * @param reserve
 * @return void
 */
typedef void (*crtc_pcm_speaker_out_data_cb_func)(const uint8_t* data,
                                                  uint32_t size,
                                                  int channels,
                                                  int sample_rate,
                                                  void* context);

/**
 * @brief set callback function of pcm data of speaker out
 * @param cb                            callback function of pcm data of mic
 * @param context                       context
 * @return int                          success:==0 failed:<0
 */
CRTC_API int crtc_pcm_speaker_out_set_cb(HANDLE handle_crtc,
                                         crtc_pcm_speaker_out_data_cb_func cb,
                                         void* context);

/**
 * @brief set pcm info of mic in data of pcm data.
 * support mono channel, sample rate 8000,16000,32000,44100,48000, sample bits
 * 16
 * @param handle_crtc                   handle_crtc generated by crtc_init
 * @param channels                      channels of pcm data
 * @param sample_rate                   rate of sample
 * @param sample_bits                   bits of sample
 * @return int                          success:==0 failed:<0
 */
CRTC_API int crtc_pcm_mic_in_set_info(HANDLE handle_crtc,
                                      crtc_e_channel channels,
                                      crtc_e_sample_rate sample_rate,
                                      int sample_bits);

/**
 * @brief write pcm data of mic in, the pcm data will be processed by crtc
 * @param handle_crtc                   handle_crtc generated by crtc_init
 * @param data                          data of pcm data
 * @param size                          length of pcm data
 * @param time_ms                       time_ms of pcm data
 * @return int                          success:==size failed:<0
 */
CRTC_API int crtc_pcm_mic_in_write(HANDLE handle_crtc,
                                   const uint8_t* data,
                                   uint32_t size,
                                   int64_t time_ms);

/**
 * @brief the callback function to get the pcm data of recording or playing
 * @param data                       address pointer of audio data
 * @param size                       length of audio data
 * @param sample_rate                sample_rate of audio data
 * @param sample_bits                sample_bits of audio data
 * @param channels                   channels of audio data
 * @return void
 */
typedef void (*crtc_pcm_audio_data_cb_func)(uint8_t* data,
                                            uint32_t size,
                                            uint32_t sample_rate,
                                            uint32_t sample_bits,
                                            uint32_t channels);

// TODO(hhool):
/**
 * @brief register the callback function to get the pcm data of recording
 * @param handle_crtc                   handle_crtc generated by crtc_init
 * @param cbRecording                   callback function to get the pcm
 * address pointer
 * @return int                          success:==0 failed:<0
 */
CRTC_API int crtc_pcm_register_recording_data_callback(
    HANDLE handle_crtc,
    crtc_pcm_audio_data_cb_func cbRecording);

// TODO(hhool):
/**
 * @brief register the callback function to get the pcm data of speaker
 * @param handle_crtc                  handle_crtc generated by crtc_init
 * @param cbPlay                       callback function to get the pcm
 * address pointer
 * @return int                         success:==0 failed:<0
 */
CRTC_API int crtc_pcm_register_play_data_callback(
    HANDLE handle_crtc,
    crtc_pcm_audio_data_cb_func cbPlay);

#ifdef __cplusplus
}
#endif

#endif  // CRTC_CRTC_API_INCLUDE_LIBCA_AUDIO_H_
